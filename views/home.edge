<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/@mdi/font@6.x/css/materialdesignicons.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css" rel="stylesheet">
  <title>System</title>
</head>

<body>

  <div id="app">
    <v-app>
      <v-main>
        <v-container>
          <v-data-table :search="search" :headers="headers" :items="desserts" sort-by="calories" class="elevation-1">
            <template v-slot:top>
              <v-toolbar flat>
                <v-toolbar-title>Data</v-toolbar-title>
                <v-spacer></v-spacer>
                <v-dialog v-model="dialog" max-width="500px">
                  <template v-slot:activator="{ on, attrs }">
                    <v-btn color="primary" dark class="mb-2" v-bind="attrs" v-on="on">
                      New Entry
                    </v-btn>
                  </template>
                  <v-card>
                    <v-card-title>
                      <span class="text-h5">@{{ formTitle }}</span>
                    </v-card-title>

                    <v-card-text>
                      <v-container>
                        <v-row>
                          <v-col cols="12" sm="6" md="4">
                            <v-text-field v-model="editedItem.code" label="Internal code"></v-text-field>
                          </v-col>
                          <v-col cols="12" sm="6" md="4">
                            <v-text-field v-model="editedItem.name" label="Material Name"></v-text-field>
                          </v-col>
                          <v-col cols="12" sm="6" md="4">
                            <v-text-field v-model="editedItem.supplier" label="Supplier"></v-text-field>
                          </v-col>
                          <v-col cols="12" sm="6" md="4">
                            <v-text-field v-model="editedItem.stock" label="Current Stock"></v-text-field>
                          </v-col>
                          <v-col cols="12" sm="6" md="4">
                            <v-text-field v-model="editedItem.expiry_date" label="Expiry Date"></v-text-field>
                          </v-col>
                          <v-col cols="12" sm="6" md="4">
                            <v-text-field v-model="editedItem.order" label="On Order"></v-text-field>
                          </v-col>
                          <v-col cols="12" sm="6" md="4">
                            <v-text-field v-model="editedItem.stock_status" label="Stock Status"></v-text-field>
                          </v-col>
                        </v-row>
                      </v-container>
                    </v-card-text>

                    <v-card-actions>
                      <v-spacer></v-spacer>
                      <v-btn color="blue darken-1" text @click="close">
                        Cancel
                      </v-btn>
                      <v-btn color="blue darken-1" :loading="loading" text @click="save">
                        Save
                      </v-btn>
                    </v-card-actions>
                  </v-card>
                </v-dialog>
                <v-form action="/logout" method="post" class="ml-2">
                  <v-btn type="submit" color="warning" dark class="mr-2 mb-2">
                    logout
                  </v-btn>
                </v-form>
                <v-dialog v-model="dialogDelete" max-width="500px">
                  <v-card>
                    <v-card-title class="text-h5">Are you sure you want to delete this item?</v-card-title>
                    <v-card-actions>
                      <v-spacer></v-spacer>
                      <v-btn color="blue darken-1" text @click="closeDelete">Cancel</v-btn>
                      <v-btn color="blue darken-1" :loading="loading" text @click="deleteItemConfirm">OK</v-btn>
                      <v-spacer></v-spacer>
                    </v-card-actions>
                  </v-card>
                </v-dialog>
              </v-toolbar>
              <v-toolbar flat>
                <v-text-field v-model="search" append-icon="mdi-magnify" label="Search" single-line hide-details>
                </v-text-field>
              </v-toolbar>
            </template>
            <template v-slot:item.actions="{ item }">
              <v-icon small class="mr-2" @click="editItem(item)">
                mdi-pencil
              </v-icon>
              <v-icon small @click="deleteItem(item)">
                mdi-delete
              </v-icon>
            </template>
            <template v-slot:no-data>
              <v-btn color="primary" @click="initialize">
                Reset
              </v-btn>
            </template>
          </v-data-table>
        </v-container>
      </v-main>
    </v-app>
  </div>

  <script src="https://unpkg.com/axios@1.1.2/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js"></script>
  <script>
    new Vue({
      el: '#app',
      vuetify: new Vuetify(),
      data: () => ({
        loading: false,
        dialog: false,
        dialogDelete: false,
        headers: [
          { text: 'Internal code', value: 'code'},
          { text: 'Material Name', value: 'name' },
          { text: 'Supplier', value: 'supplier' },
          { text: 'Current Stock', value: 'stock' },
          { text: 'Expiry Date', value: 'expiry_date' },
          { text: 'On Order', value: 'order'},
          { text: 'Stock Status', value: 'stock_status'},
          { text: 'Actions', value: 'actions'},
        ],
        search: '',
        desserts: [],
        editedIndex: -1,
        editedItem: {
          code: '',
          name: '',
          supplier: '',
          stock: 0,
          expiry_date: '',
          order: 0,
          stock_status: '',
        },
        defaultItem: {
          code: '',
          name: '',
          supplier: '',
          stock: 0,
          expiry_date: '',
          order: 0,
          stock_status: '',
        },
      }),

      computed: {
        formTitle () {
          if(this.editedIndex === -1) {
            return 'New Item' 
          }  
          else {
            return 'Edit Item'
          }
        },
      },

      watch: {
        dialog (val) {
          val || this.close()
        },
        dialogDelete (val) {
          val || this.closeDelete()
        },
      },

      created () {
        this.initialize()
      },

      methods: {
        initialize () {
          let rows = {{{ JSON.stringify(rows) }}}
          this.desserts = rows.map(row => ({
            code: row[0], 
            name: row[1] , 
            supplier: row[2], 
            stock: row[3], 
            expiry_date:row[4], 
            order: row[5],
            stock_status: row[6]
          }))
        },

        editItem (item) {
          this.editedIndex = this.desserts.indexOf(item)
          this.editedItem = Object.assign({}, item)
          this.dialog = true
        },

        deleteItem (item) {
          this.editedIndex = this.desserts.indexOf(item)
          this.editedItem = Object.assign({}, item)
          this.dialogDelete = true
        },

        deleteItemConfirm () {
          this.loading = true
          axios.delete(`/product/${this.editedIndex + 1}`).then(response => {
            if(response.data.deleted){
              this.desserts.splice(this.editedIndex, 1)
              this.closeDelete()
              this.loading = false
              }
            })
        },

        close () {
          this.dialog = false
          this.$nextTick(() => {
            this.editedItem = Object.assign({}, this.defaultItem)
            this.editedIndex = -1
          })
        },

        closeDelete () {
          this.dialogDelete = false
          this.$nextTick(() => {
            this.editedItem = Object.assign({}, this.defaultItem)
            this.editedIndex = -1
          })
        },

        save () {
          let requestData = []
          for (const key in this.editedItem) {
            requestData.push(this.editedItem[key])
          }
          if (this.editedIndex > -1) {
            // edit
            this.loading = true
            axios
            .put(`/product/${this.editedIndex + 2}`, {requestData})
            .then(response => {
              Object.assign(this.desserts[this.editedIndex], this.editedItem)
              this.loading = false
              this.close()
            })
          } 
          else {
            // insert
            this.loading = true
            axios
              .post(`/product`, {requestData})
              .then(response => {
                this.desserts.push(this.editedItem)
                this.loading = false
                this.close()
              })
          }
        },
      },
    })
  </script>
</body>

</html>